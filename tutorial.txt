Table of Contents
_________________

1 Installation
2 Getting information about a specific RFC
3 Reading RFCs
4 Searching for RFCs
5 Done!


1 Installation
==============

  To install the package, simply put it in a directory that's inside the
  `load-path', or add the directory:

  ,----
  | (add-to-list 'load-path <the chosen directory>)
  `----

  I suggest also adding the following to your init file to activate
  auto-loading and set keys:

  ,----
  | (autoload 'rfcinfo-show "rfcinfo" nil t)
  | (autoload 'rfcinfo-open "rfcinfo" nil t)
  | (autoload 'rfcinfo-refresh "rfcinfo" nil t)
  `----

  ,----
  | (global-set-key "\C-cr" 'rfcinfo-show)
  | (global-set-key "\C-cR" 'rfcinfo-open)
  `----

  The first thing to do is to download the rfc-index file and build the
  database:

  ,----
  | M-x rfcinfo-refresh <RET>
  `----

  This will ask you confirmation for creating the directory where data
  and RFC files will be stored (variable `rfcinfo-dir', default is
  `~/.cache/rfc/').  Unfortunately, the download and parsing can take
  quite some time...

  As you saw, there are two main commands that are provided.


2 Getting information about a specific RFC
==========================================

  The first command is `rfcinfo-show', it can be invoked either by `M-x
  rfcinfo-show' or by `C-c r'.  Enter an RFC number, status is displayed
  in a new window.

  Faces on RFC numbers show the category (bold for standards, various
  color for other categories) and status (underlined for updated,
  striked-out for obsolated).

  Up and down arrows allow navigating between RFC numbers, right arrow
  is used to "follow" an RFC, left arrow to get back to previous state.
  "q" closes the window.

  "a" displays the abstract.  If the RFC is not available locally, this
  is extracted from the rfc-index file (remember, left arrow to go
  back), otherwise the RFC file is displayed and point set to the
  abstract.

  Type "?" for the full list of key bindings.

  `C-c r' does not ask for a number if point is on an RFC number such as
  rfc1034, 1035 (if you're reading this file in emacs try it here!),
  unless a prefix argument is provided (C-u C-c r).  In this case, the
  number is proposed as default.


3 Reading RFCs
==============

  The second command is `rfcinfo-open', bound to `C-c R'.  Give it an
  RFC number, the file is downloaded from `rfcinfo-remote-repository', a
  copy is saved in the directory `rfcinfo-dir', and will be used next
  time.

  I know of two major modes to display RFCs, `rfcview' and `irfc'.
  `rfcinfo' adds a few bindings to these major modes.

  `rfcinfo-open' can also open an RFC and place the point at a specific
  location.  This is very convenient to keep a reference on a specific
  item.  For example (try `C-c R' on the following RFC references, use
  "q" to quit):

  ,----
  | rfc2181-5    RR has label, class, type and data. [+ defining RRSet]
  | rfc2181-5.2  Resource Records also have a time to live (TTL).
  `----

  ,----
  | AA bit: the data matching the question name is authoritative (rfc1034-6.2.7) 
  `----

  ,----
  | rfc1035-4.1.1+42 (line 42 after section 4.1.1)
  `----

  The full syntax of such references is described in the source.  They
  can be built with command `rfcinfo-build-ref'.  The location part uses
  the table of content built by `irfc-mode' or `rfcview-mode'.  Warning:
  the regexp used to find headings can occasionally be wrong in a few
  cases, but that works very well in the vast majority of cases.


4 Searching for RFCs
====================

  You can also use `rfcinfo-show' to search for terms in the title.
  Enter the search term instead of the number, and a browsable list of
  matching RFCs will be displayed.


5 Done!
=======

  That's it.  You'll have to run `rfcinfo-refresh' periodically to
  refresh the database; this will display a list of changes (new RFCs,
  RFCs that have changed status, that have been updated...)

  See comments in source file rfcinfo.el for more details.  I hope
  you'll enjoy it.  Comments and suggestions are welcome!
